{"version":3,"sources":["../src/utils.js"],"names":["flattenConfig","getRoutesBySignal","hasChangedPath","computeShouldChange","compatConfig","config","prev","concat","Object","keys","map","conf","key","path","signal","Array","isArray","reduce","flattened","routes","rmap","assign","currentPath","stateMapping","filter","type","length","computedKeys","computedMapping","mapping","tracker","needsInit","propsMapping","Error","computedRmapKeys","computedRMapping","routableSignals","route","signalName","changes","change","join","changed","flatMap","stateTrackFlatMap"],"mappings":"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","file":"utils.js","sourcesContent":["import {Compute} from 'cerebral/lib/Compute'\nimport DependencyTracker from 'cerebral/lib/DependencyTracker'\n\nfunction compatConfig (config, prev = '') {\n  return [].concat(...Object.keys(config).map(key => {\n    const conf = config[key]\n    if (typeof conf === 'string') {\n      return [{path: prev + key, signal: conf}]\n    }\n    return compatConfig(conf, prev + key)\n  }))\n}\n\nexport function flattenConfig (config, prev = '') {\n  if (!Array.isArray(config)) {\n    config = compatConfig(config)\n  }\n  return config.reduce((flattened, {map, path, routes, rmap, signal}) => {\n    if (routes) {\n      Object.assign(flattened, flattenConfig(routes, prev + path))\n    }\n\n    const currentPath = prev + path\n    const conf = {signal}\n    if (map) {\n      conf.map = map\n      const stateMapping = Object.keys(map).filter((key) => map[key].type === 'state')\n      if (stateMapping.length) {\n        conf.stateMapping = stateMapping\n      }\n\n      const computedKeys = Object.keys(map).filter((key) => (map[key] instanceof Compute))\n      if (computedKeys.length) {\n        conf.computedMapping = computedKeys.reduce((mapping, key) => {\n          const tracker = new DependencyTracker(map[key])\n          // We have to wait until we have access to controller before\n          // doing the first run.\n          mapping[key] = { tracker, needsInit: true }\n          return mapping\n        }, {})\n      }\n\n      const propsMapping = Object.keys(map).filter((key) => map[key].type === 'props')\n      if (propsMapping.length) {\n        conf.propsMapping = propsMapping\n        if (!signal) {\n          throw new Error(`Cerebral router - route ${currentPath} has props mappings but no signal was defined.`)\n        }\n      }\n    }\n\n    const computedRmapKeys = Object.keys(rmap || {})\n    .filter((key) => rmap[key] instanceof Compute)\n\n    if (computedRmapKeys.length) {\n      conf.rmap = rmap\n      conf.computedRMapping = computedRmapKeys.reduce((mapping, key) => {\n        const tracker = new DependencyTracker(rmap[key])\n        // We have to wait until we have access to controller before\n        // doing the first run.\n        mapping[key] = { tracker, needsInit: true }\n        return mapping\n      }, {})\n    }\n\n    flattened[currentPath] = conf\n\n    return flattened\n  }, {})\n}\n\nexport function getRoutesBySignal (config) {\n  return Object.keys(config).reduce((routableSignals, route) => {\n    const {signal: signalName} = config[route]\n\n    if (!signalName) {\n      return routableSignals\n    }\n\n    if (routableSignals[signalName]) {\n      throw new Error(`Cerebral router - The signal ${signalName} has already been bound to route ${route}. Create a new signal and reuse actions instead if needed.`)\n    }\n\n    routableSignals[signalName] = route\n\n    return routableSignals\n  }, {})\n}\n\nexport function hasChangedPath (changes, path) {\n  for (let change in changes) {\n    if (changes[change].path.join('.') === path) {\n      return true\n    }\n  }\n}\n\n// FIXME: this is really slowing the app down for every url compute.\n// We should find a way to migrate this into DependencyStore somehow.\nexport function computeShouldChange (tracker, changed) {\n  const flatMap = tracker.stateTrackFlatMap\n  for (let change of changed) {\n    if (flatMap[change.path.join('.')]) {\n      return true\n    }\n  }\n  return false\n}\n"]}