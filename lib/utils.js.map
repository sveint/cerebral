{"version":3,"sources":["../src/utils.js"],"names":["flattenConfig","getRoutesBySignal","hasChangedPath","compatConfig","config","prev","concat","Object","keys","map","conf","key","path","signal","Array","isArray","reduce","flattened","routes","assign","currentPath","stateMapping","filter","type","length","propsMapping","Error","routableSignals","route","signalName","changes","change","join"],"mappings":"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","file":"utils.js","sourcesContent":["function compatConfig (config, prev = '') {\n  return [].concat(...Object.keys(config).map(key => {\n    const conf = config[key]\n    if (typeof conf === 'string') {\n      return [{path: prev + key, signal: conf}]\n    }\n    return compatConfig(conf, prev + key)\n  }))\n}\n\nexport function flattenConfig (config, prev = '') {\n  if (!Array.isArray(config)) {\n    config = compatConfig(config)\n  }\n  return config.reduce((flattened, {path, signal, map, routes}) => {\n    if (routes) {\n      Object.assign(flattened, flattenConfig(routes, prev + path))\n    }\n\n    const currentPath = prev + path\n    const conf = {signal}\n    if (map) {\n      conf.map = map\n      const stateMapping = Object.keys(map).filter((key) => map[key].type === 'state')\n      if (stateMapping.length) {\n        conf.stateMapping = stateMapping\n      }\n\n      const propsMapping = Object.keys(map).filter((key) => map[key].type === 'props')\n      if (propsMapping.length) {\n        conf.propsMapping = propsMapping\n        if (!signal) {\n          throw new Error(`Cerebral router - route ${currentPath} has props mappings but no signal was defined.`)\n        }\n      }\n    }\n\n    flattened[currentPath] = conf\n\n    return flattened\n  }, {})\n}\n\nexport function getRoutesBySignal (config) {\n  return Object.keys(config).reduce((routableSignals, route) => {\n    const {signal: signalName} = config[route]\n\n    if (!signalName) {\n      return routableSignals\n    }\n\n    if (routableSignals[signalName]) {\n      throw new Error(`Cerebral router - The signal ${signalName} has already been bound to route ${route}. Create a new signal and reuse actions instead if needed.`)\n    }\n\n    routableSignals[signalName] = route\n\n    return routableSignals\n  }, {})\n}\n\nexport function hasChangedPath (changes, path) {\n  for (let change in changes) {\n    if (changes[change].path.join('.') === path) {\n      return true\n    }\n  }\n}\n"]}