{"version":3,"sources":["../src/router.js"],"names":["Router","controller","addressbar","mapper","options","activeRoute","stateGetter","getState","bind","provider","router","getUrl","getPath","getValues","getOrigin","setUrl","goTo","redirect","redirectToSignal","baseUrl","onlyHash","pathname","on","routesConfig","routes","routesBySignal","onUrlChange","onSignalStart","onFlush","preventAutostart","url","path","replace","origin","indexOf","event","getRoutablePart","target","value","match","route","values","mapped","map","err","Error","allowEscape","preventDefault","console","warn","signal","stateMapping","propsMapping","payload","getters","props","state","runSignal","resolve","forEach","key","set","undefined","reduce","mappedPayload","prevSignal","getSignal","execution","name","stringify","Object","keys","resolved","getValue","filterFalsy","changed","shouldUpdate","resolvedMap","assign","split","signalName"],"mappings":"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","file":"router.js","sourcesContent":["import {flattenConfig, getRoutesBySignal, hasChangedPath} from './utils'\nimport {getChangedProps} from 'cerebral/lib/utils'\n\nexport default class Router {\n  constructor (controller, addressbar, mapper, options) {\n    this.controller = controller\n    this.addressbar = addressbar\n    this.mapper = mapper\n    this.options = options\n    this.activeRoute = {}\n    this.stateGetter = this.controller.getState.bind(this.controller)\n\n    this.provider = {\n      router: {\n        getUrl: this.getUrl.bind(this),\n        getPath: this.getPath.bind(this),\n        getValues: this.getValues.bind(this),\n        getOrigin: this.getOrigin.bind(this),\n        setUrl: this.setUrl.bind(this),\n        goTo: this.goTo.bind(this),\n        redirect: this.redirect.bind(this),\n        redirectToSignal: this.redirectToSignal.bind(this)\n      }\n    }\n\n    if (!options.baseUrl && options.onlyHash) {\n      // autodetect baseUrl\n      options.baseUrl = addressbar.pathname\n    }\n    options.baseUrl = (options.baseUrl || '') + (options.onlyHash ? '#' : '')\n\n    controller.on('initialized', () => {\n      this.routesConfig = flattenConfig(options.routes)\n      this.routesBySignal = getRoutesBySignal(this.routesConfig, controller)\n\n      addressbar.on('change', this.onUrlChange.bind(this))\n      controller.on('start', this.onSignalStart.bind(this))\n      controller.on('flush', this.onFlush.bind(this))\n\n      if (!options.preventAutostart) {\n        this.onUrlChange()\n      }\n    })\n  }\n\n  getRoutablePart (url) {\n    let path = url.replace(this.addressbar.origin, '')\n    if (path[0] !== '/') {\n      path = '/' + path\n    }\n    if (this.options.onlyHash && !~path.indexOf('#')) {\n      // treat hash absense as root route\n      path = path + '#/'\n    }\n    return path.indexOf(this.options.baseUrl) === 0\n      ? path.replace(this.options.baseUrl, '')\n      : null\n  }\n\n  onUrlChange (event) {\n    const url = this.getRoutablePart(event ? event.target.value : this.addressbar.value)\n    if (url === null) return\n\n    let match, route, values\n    try {\n      const mapped = this.mapper.map(url, this.routesConfig) || {}\n      match = mapped.match\n      route = mapped.route\n      values = mapped.values\n    } catch (err) {\n      throw new Error('Could not parse url (' + err + ').')\n    }\n\n    if (!match) {\n      if (this.options.allowEscape) return\n\n      event && event.preventDefault()\n      console.warn(`Cerebral router - No route matched ${url}, navigation was prevented. Please verify url or catch unmatched routes with a \"/*\" route.`) // eslint-disable-line no-console\n      return\n    }\n\n    event && event.preventDefault()\n    const {signal, map, stateMapping, propsMapping} = match\n    let payload = values\n    const getters = {props: payload, state: this.stateGetter}\n\n    if (stateMapping) {\n      this.controller.runSignal('router.routed', [\n        ({state, resolve}) => {\n          stateMapping.forEach((key) => {\n            const value = values[key]\n            state.set(resolve.path(map[key]), value === undefined ? null : value)\n          })\n        }\n      ])\n    }\n\n    if (propsMapping) {\n      payload = propsMapping.reduce((mappedPayload, key) => {\n        mappedPayload[map[key].getPath(getters)] = values[key] || null\n        return mappedPayload\n      }, {})\n    }\n\n    const prevSignal = (this.routesConfig[this.activeRoute.route] || {}).signal\n    if (signal && (prevSignal !== signal || getChangedProps(payload || {}, this.activeRoute.payload || {}))) {\n      this.controller.getSignal(signal)(payload)\n    }\n\n    this.activeRoute = {route, payload}\n  }\n\n  onSignalStart (execution, payload) {\n    const route = this.routesBySignal[execution.name]\n    if (!route) return\n\n    const {map} = this.routesConfig[route]\n    const getters = {props: payload, state: this.stateGetter}\n\n    // resolve mappings on current props and state\n    const url = this.mapper.stringify(\n      route,\n      map\n        ? Object.keys(map || {}).reduce((resolved, key) => {\n          const value = map[key].getValue(getters)\n\n          if (this.options.filterFalsy && !value) {\n            return resolved\n          }\n\n          resolved[key] = value\n          return resolved\n        }, {})\n        : payload\n    )\n\n    this.setUrl(url)\n\n    this.activeRoute = {route, payload}\n  }\n\n  onFlush (changed) {\n    const {route, payload} = this.activeRoute\n    const {map, stateMapping} = this.routesConfig[route] || {}\n    if (!stateMapping) return\n\n    const getters = {props: payload, state: this.stateGetter}\n    let shouldUpdate = false\n\n    const resolvedMap = Object.keys(map || {}).reduce((resolved, key) => {\n      const path = map[key].getPath(getters)\n      const value = map[key].getValue(getters)\n\n      shouldUpdate = shouldUpdate || (stateMapping.indexOf(key) >= 0 && hasChangedPath(changed, path))\n\n      if (!this.options.filterFalsy || value) {\n        // Cerebral state only supports null and url-mapper only supports\n        // undefined: so we map from one to the other here.\n        resolved[key] = value === null ? undefined : value\n      }\n\n      return resolved\n    }, {})\n\n    if (shouldUpdate) {\n      this.setUrl(this.mapper.stringify(route, Object.assign({}, resolvedMap)))\n    }\n  }\n\n  setUrl (url) {\n    this.addressbar.value = (this.options.baseUrl + url) || '/'\n  }\n\n  getUrl () {\n    return this.addressbar.value\n  }\n\n  getPath () {\n    return this.addressbar.value.replace(this.addressbar.origin + this.options.baseUrl, '').split('?')[0]\n  }\n\n  getValues () {\n    const url = this.getRoutablePart(this.addressbar.value)\n    const mapped = this.mapper.map(url, this.routesConfig) || {}\n\n    return mapped.values\n  }\n\n  getOrigin () {\n    return this.addressbar.origin\n  }\n\n  goTo (url) {\n    this.addressbar.value = this.options.baseUrl + url\n    this.onUrlChange()\n  }\n\n  redirect (url) {\n    this.addressbar.value = {\n      value: this.options.baseUrl + url,\n      replace: true\n    }\n\n    this.onUrlChange()\n  }\n\n  redirectToSignal (signalName, payload) {\n    const route = this.routesBySignal[signalName]\n    if (!route) {\n      console.warn(`redirectToSignal: signal '${signalName}' not bound to route.`)\n    }\n    this.controller.getSignal(signalName)(payload)\n  }\n\n  reload () {\n    this.redirect(this.getUrl())\n  }\n}\n"]}